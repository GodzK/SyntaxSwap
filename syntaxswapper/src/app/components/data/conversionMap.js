const conciseConversionMap = {
    "console.log()": {
      JavaScript: "console.log()",
      Python: "print()",
      PHP: "echo",
      Java: "System.out.println()",
      "C++": "std::cout <<",
      TypeScript: "console.log()",
    },
    "print()": {
      JavaScript: "console.log()",
      Python: "print()",
      PHP: "echo",
      Java: "System.out.println()",
      "C++": "std::cout <<",
      TypeScript: "console.log()",
    },
    "echo": {
      JavaScript: "console.log()",
      Python: "print()",
      PHP: "echo",
      Java: "System.out.println()",
      "C++": "std::cout <<",
      TypeScript: "console.log()",
    },
    "System.out.println()": {
      JavaScript: "console.log()",
      Python: "print()",
      PHP: "echo",
      Java: "System.out.println()",
      "C++": "std::cout <<",
      TypeScript: "console.log()",
    },
    "std::cout <<": {
      JavaScript: "console.log()",
      Python: "print()",
      PHP: "echo",
      Java: "System.out.println()",
      "C++": "std::cout <<",
      TypeScript: "console.log()",
    },
    "let variable": {
      JavaScript: "let variable",
      Python: "variable =",
      PHP: "$variable =",
      Java: "variable",
      "C++": "variable",
      TypeScript: "let variable",
    },
    "const constant": {
      JavaScript: "const constant",
      Python: "CONSTANT =",
      PHP: "define('CONSTANT', value)",
      Java: "final constant",
      "C++": "const constant",
      TypeScript: "const constant",
    },
    "function name() {}": {
      JavaScript: "function name() {}",
      Python: "def name():",
      PHP: "function name() {}",
      Java: "public static void name() {}",
      "C++": "void name() {}",
      TypeScript: "function name() {}",
    },
    "array.push(element)": {
      JavaScript: "array.push(element)",
      Python: "array.append(element)",
      PHP: "array_push(array, element)",
      Java: "array.add(element)",
      "C++": "array.push_back(element)",
      TypeScript: "array.push(element)",
    },
    "array[index]": {
      JavaScript: "array[index]",
      Python: "array[index]",
      PHP: "array[index]",
      Java: "array.get(index)",
      "C++": "array[index]",
      TypeScript: "array[index]",
    },
    "string.length": {
      JavaScript: "string.length",
      Python: "len(string)",
      PHP: "strlen(string)",
      Java: "string.length()",
      "C++": "string.length()",
      TypeScript: "string.length",
    },
    "string.substring(start, end)": {
      JavaScript: "string.substring(start, end)",
      Python: "string[start:end]",
      PHP: "substr(string, start, length)",
      Java: "string.substring(start, end)",
      "C++": "string.substr(start, length)",
      TypeScript: "string.substring(start, end)",
    },
    "// comment": {
      JavaScript: "// comment",
      Python: "# comment",
      PHP: "// comment",
      Java: "// comment",
      "C++": "// comment",
      TypeScript: "// comment",
    },
    "/* comment */": {
      JavaScript: "/* comment */",
      Python: '""" comment """',
      PHP: "/* comment */",
      Java: "/* comment */",
      "C++": "/* comment */",
      TypeScript: "/* comment */",
    },
    "if (condition) {}": {
      JavaScript: "if (condition) {}",
      Python: "if condition:",
      PHP: "if (condition) {}",
      Java: "if (condition) {}",
      "C++": "if (condition) {}",
      TypeScript: "if (condition) {}",
    },
    "for (let i = 0; i < 10; i++) {}": {
      JavaScript: "for (let i = 0; i < 10; i++) {}",
      Python: "for i in range(10):",
      PHP: "for ($i = 0; $i < 10; $i++) {}",
      Java: "for (int i = 0; i < 10; i++) {}",
      "C++": "for (int i = 0; i < 10; i++) {}",
      TypeScript: "for (let i = 0; i < 10; i++) {}",
    },
    "while (condition) {}": {
      JavaScript: "while (condition) {}",
      Python: "while condition:",
      PHP: "while (condition) {}",
      Java: "while (condition) {}",
      "C++": "while (condition) {}",
      TypeScript: "while (condition) {}",
    },
    "try {} catch (error) {}": {
      JavaScript: "try {} catch (error) {}",
      Python: "try: except Exception as error:",
      PHP: "try {} catch (Exception $error) {}",
      Java: "try {} catch (Exception error) {}",
      "C++": "try {} catch (exception& error) {}",
      TypeScript: "try {} catch (error) {}",
    },
  };
  
  export default conciseConversionMap;
  